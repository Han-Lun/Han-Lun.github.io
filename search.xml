<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vue-todolist]]></title>
    <url>%2F2017%2F12%2F03%2Ftodolist%2F</url>
    <content type="text"><![CDATA[vue-todolist###完成成品Vue-todolist基于Vue的TodoList示例，麻雀虽小，五脏俱全 ##技术栈 Vue + localStorage + hash ##功能描述(使用说明) 添加备忘录(输入标题后回车添加,如果内容为空或只有空格会清空，什么都不添加) 删除备忘录(点击标题后面的叉) 完成备忘录(点击标题前面的复选框) 编辑备忘录(双击标题进入编辑模式) 取消编辑备忘录(按ESC或者失去焦点时) 完成编辑备忘录(按回车键完成[如果内容为空的时候会自动删除]，此时也会调用到失去焦点事件) 一键完成所有备忘录(点击第一行的复选框) 过滤任务，显示全部，未完成，已完成的备忘录(点击全部，未完成，已完成按钮) 清空已完成备忘录(点击清空已完成)##Vue相关知识点练习：加载环境 npm init -ynpm i -S underscore vue todomvc-app-cssvim index.html复制格式化后的html引入css将英文标题换成中文标题引入vue.js新建vue的实例写一个默认的任务：todoList: [{}] el选项挂载DOM12345678910111213141516171819202122232425262728// 新建一个Vue的实例对象var todoapp = new Vue(&#123; // 挂载 el: &apos;.todoapp&apos;, // 数据 data: &#123; // 备忘录数组 todoList: [ // 一个任务就是一个对象，text表示任务的名称，checked为true表示已完成，false表示未完成 &#123; text: &apos;学Vue&apos;, checked: false &#125;, &#123; text: &apos;学React&apos;, checked: false &#125; ] &#125;, 方法 methods: &#123; &#125;, // 计算属性 computed: &#123; &#125;&#125;) 属性1234567data: &#123; newTodo: &apos;&apos;, todos: todoStorage.fetch(), editedTodo: null, beforeEditCache: &apos;&apos;, visibility &#125; 计算属性（get,set）1234567891011121314151617181920212223242526272829computed: &#123; //显示任务总数量 showTodos() &#123; return this.todos.length &gt; 0 &#125;, //未完成 activeCount() &#123; return filters.active(this.todos).length &#125;, //已完成 completedCount() &#123; return filters.completed(this.todos).length &#125;, //判断所有任务 allDone: &#123; get() &#123; return this.activeCount === 0 &#125;, set(value) &#123; this.todos.map(todo =&gt; &#123; todo.completed = value &#125;) &#125; &#125;, //判断 filteredTodos() &#123; return filters[this.visibility](this.todos) &#125; &#125; 12345678910111213141516//store.js的判断获取(function()&#123; var STORAGE_KEY = &apos;todos&apos; window.todoStorage = &#123; fetch() &#123; try &#123; return JSON.parse(localStorage.getItem(STORAGE_KEY) || &apos;[]&apos;) &#125; catch(err) &#123; return []; &#125; &#125;, save(todos) &#123; localStorage.setItem(STORAGE_KEY, JSON.stringify(todos)) &#125; &#125;&#125;)(); 属性观察1234567891011121314 var filters = &#123; all: todos =&gt; todos, active: todos =&gt; todos.filter(todo =&gt; !todo.completed), completed: todos =&gt; todos.filter(todo =&gt; todo.completed) &#125; var visibility = location.hash.substr(location.hash.indexOf(&apos;/&apos;)+1) visibility = visibility === &apos;&apos; ? &apos;all&apos; : visibilitywatch: &#123; todos: &#123; deep: true, handler: todoStorage.save//判断当前应显示的内容 &#125; &#125; 方法12345678910111213141516171819202122232425262728293031323334353637383940methods: &#123; addTodo() &#123; this.newTodo = this.newTodo.trim() if (!this.newTodo) &#123; return &#125; this.todos.unshift(&#123; title: this.newTodo, completed: false &#125;) this.newTodo = &apos;&apos; &#125;, removeTodo(todo) &#123; var index = this.todos.indexOf(todo) this.todos.splice(index, 1) &#125;, editTodo(todo) &#123; this.editedTodo = todo this.beforeEditCache = todo.title &#125;, doneEdit(todo) &#123; if (!this.editedTodo) &#123; return; &#125; this.editedTodo = null; todo.title = todo.title.trim() if (!todo.title) &#123; this.removeTodo(todo) &#125; &#125;, cancelEdit(todo) &#123; if (this.editedTodo) &#123; todo.title = this.beforeEditCache this.editedTodo = null &#125; &#125;, removeCompleted() &#123; this.todos = filters.active(this.todos) &#125; &#125; 指令1234567directives: &#123; focus: &#123; update(el) &#123; el.focus() &#125; &#125; &#125;]]></content>
      <categories>
        <category>Learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F2017%2F12%2F01%2Ftest%2F</url>
    <content type="text"><![CDATA[安装 Node 和 gulp gulp 是基于 node 实现的，那么我们就需要先安装 node。npm 是 node 的包管理工具，可以利用它安装 gulp 所需的包。（在安装 node 时已经自动安装了 npm） 在命令行输入 1npm install -g gulp 安装gulp（-g 安装全局性的gulp包） 如果一直没安装成功，请使用 cnpm 安装(npm的国内加速镜像)或者请输入sudo npm install -g gulp使用管理员权限安装。（可能会要求输入密码）安装时请注意命令行的提示信息，安装完成后可在命令行输入 gulp -v 以确认安装成功。 ##使用 gulp 压缩 JS压缩 js 代码可降低 js 文件大小，提高页面打开速度。在不利用 gulp 时我们需要通过各种工具手动完成压缩工作。 所有的 gulp 代码编写都可以看做是将规律转化为代码的过程。找到 js/ 目录下的所有 js 文件，压缩它们，将压缩后的文件存放在 dist/js/ 目录下。 gulp 的所有配置代码都写在 gulpfile.js 文件。gulp 压缩是需要用到的方法 gulp.task(name, fn) - 定义任务，第一个参数是任务名，第二个参数是任务内容。 gulp.src(path) - 选择文件，传入参数是文件路径。 gulp.dest(path) - 输出文件 gulp.pipe() - 管道，你可以暂时将 pipe 理解为将操作加入执行队列 一、新建一个 gulpfile.js 文件12gulp-easy└── gulpfile.js 二、在 gulpfile.js 中编写代码 12// 获取 gulplet gulp = require('gulp') require() 是 node （CommonJS）中获取模块的语法。 在 gulp 中你只需要理解 require() 可以获取模块。 三、获取 gulp-uglify 组件 12// 获取 uglify 模块（用于压缩 JS）var uglify = require('gulp-uglify') 四、创建压缩任务 123456// 压缩 js 文件// 在命令行使用 gulp script 启动此任务gulp.task('script', function() &#123; // 1. 找到文件 2.压缩文件 3.另存压缩后的文件 gulp.src('js/*.js').pipe(uglify()).pipe(gulp.dest('dist/js'))&#125;)//js/*.js表示js文件夹下的所有.js文件，js/**/*.js表示js目录下所有子目录的js文件（任意多层级的处理） 五、安装 gulp-uglify 模块 因为我们并没有安装 gulp-uglify 模块到本地，所以找不到此模块。 使用 npm 安装 gulp-uglify 到本地 1npm install -D gulp-uglify 安装成功后你会看到如下信息：1234567gulp-uglify@1.1.0 node_modules/gulp-uglify├── deepmerge@0.2.7├── uglify-js@2.4.16 (uglify-to-browserify@1.0.2, async@0.2.10, source-map@0.1.34, optimist@0.3.7)├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, object-assign@2.0.0, lodash._reinterpolate@3.0.0, lodash._reescape@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, chalk@1.0.0, lodash.template@3.3.2, vinyl@0.4.6, multipipe@0.1.2, dateformat@1.0.11)chapter2 $ 在你的文件夹中会新增一个 node_modules 文件夹，这里面存放着 npm 安装的模块。 目录结构：123├── gulpfile.js└── node_modules └── gulp-uglify 接着输入 gulp script 执行任务 1234gulp script[13:34:57] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js[13:34:57] Starting &apos;script&apos;...[13:34:57] Finished &apos;script&apos; after 6.13 ms 六、编写 js 文件 我们发现 gulp 没有进行任何压缩操作。因为没有js这个目录，也没有 js 目录下的 .js 后缀文件。 创建 a.js 文件，并编写如下内容 123456// a.jsfunction demo (msg) &#123; alert(&apos;--------\r\n&apos; + msg + &apos;\r\n--------&apos;)&#125;demo(&apos;Hi&apos;) 目录结构：12345├── gulpfile.js├── js│ └── a.js└── node_modules └── gulp-uglify 接着在命令行输入 gulp script 执行任务 gulp 会在命令行当前目录下创建 dist/js/ 文件夹，并创建压缩后的 a.js 文件。 目录结构：12345678├── gulpfile.js├── js│ └── a.js├── dist│ └── js│ └── a.js└── node_modules └── gulp-uglify 1function demo(n)&#123;alert("--------\r\n"+n+"\r\n--------")&#125;demo("Hi"); 七、检测代码修改自动执行任务 js/a.js一旦有修改 就必须重新在命令行输入 gulp script ，这很麻烦。 可以使用 gulp.watch(src, fn) 检测指定目录下文件的修改后执行任务。 在 gulpfile.js 中编写如下代码：12// 监听文件修改，当文件被修改则执行 script 任务gulp.watch(&apos;js/*.js&apos;, [&apos;script&apos;]); 但是没有命令可以运行 gulp.watch()，需要将 gulp.watch() 包含在一个任务中。 12345// 在命令行使用 gulp auto 启动此任务gulp.task(&apos;auto&apos;, function () &#123; // 监听文件修改，当文件被修改则执行 script 任务 gulp.watch(&apos;js/*.js&apos;, [&apos;script&apos;])&#125;) 接着在命令行输入 gulp auto，自动监听 js/*.js 文件的修改后压缩js。 1234$gulp auto[21:09:45] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js[21:09:45] Starting &apos;auto&apos;...[21:09:45] Finished &apos;auto&apos; after 9.19 ms 此时修改 js/a.js 中的代码并保存。命令行将会出现提示，表示检测到文件修改并压缩文件。 12[21:11:01] Starting &apos;script&apos;...[21:11:01] Finished &apos;script&apos; after 2.85 ms 至此，我们完成了 gulp 压缩 js 文件的自动化代码编写。 注意：使用 gulp.watch 后你的命令行会进入“运行”状态，此时你不可以在命令行进行其他操作。可通过 Ctrl + C 停止 gulp。 Mac 下使用 control + C 停止 gulp 八、使用 gulp.task(‘default’, fn) 定义默认任务 增加如下代码 1gulp.task('default', ['script', 'auto']); 此时你可以在命令行直接输入 gulp +回车，运行 script 和 auto 任务。 最终代码如下： 1234567891011121314151617181920212223// 获取 gulpvar gulp = require('gulp')// 获取 uglify 模块（用于压缩 JS）var uglify = require('gulp-uglify')// 压缩 js 文件// 在命令行使用 gulp script 启动此任务gulp.task('script', function() &#123; // 1. 找到文件 2.压缩文件 3.另存压缩后的文件 gulp.src('js/*.js').pipe(uglify()) .pipe(gulp.dest('dist/js'))&#125;)// 在命令行使用 gulp auto 启动此任务gulp.task('auto', function () &#123; // 监听文件修改，当文件被修改则执行 script 任务 gulp.watch('js/*.js', ['script'])&#125;)// 使用 gulp.task('default') 定义默认任务// 在命令行使用 gulp 启动 script 任务和 auto 任务gulp.task('default', ['script', 'auto']) 九、运行 gulp 查看效果 在命令行输入 gulp +回车 你将看到命令行出现如下提示 12345678gulp[17:01:19] Using gulpfile ~/Documents/code/gulp-book/demo/gulp-easy/gulpfile.js[17:01:19] Starting &apos;script&apos;...[17:01:19] Finished script&apos; after 6.21 ms[17:01:19] Starting &apos;auto&apos;...[17:01:19] Finished &apos;auto&apos; after 5.42 ms[17:01:19] Starting &apos;default&apos;...[17:01:19] Finished &apos;default&apos; after 5.71 μs gulp 会创建 dist/js 目录，并创建 a.js 文件，此文件存放压缩后的 js 代码。 ##使用 gulp 压缩 CSS同压缩js有一定相同的地方 压缩 css 代码可降低 css 文件大小，提高页面打开速度。一、安装 gulp-minify-css 模块 提示：你需要使用命令行的 cd 切换到对应目录后进行安装操作。 学习使用命令行 在命令行输入 1npm install -D gulp-minify-css 安装成功后你会看到如下信息：(安装时间可能会比较长) 1234567gulp-minify-css@1.0.0 node_modules/gulp-minify-css├── object-assign@2.0.0├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)├── clean-css@3.1.8 (commander@2.6.0, source-map@0.1.43)├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)├── vinyl-bufferstream@1.0.1 (bufferstreams@1.0.1)└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, multipipe@0.1.2, vinyl@0.4.6, chalk@1.0.0, lodash.template@3.3.2, dateformat@1.0.11) 二、参照 使用 gulp 压缩 JS 创建 gulpfile.js 文件编写代码 在对应目录创建 gulpfile.js 文件并写入如下内容： 1234567891011121314151617181920212223242526// 获取 gulpvar gulp = require('gulp')// 获取 minify-css 模块（用于压缩 CSS）var minifyCSS = require('gulp-minify-css')// 压缩 css 文件// 在命令行使用 gulp css 启动此任务gulp.task('css', function () &#123; // 1. 找到文件 gulp.src('css/*.css') // 2. 压缩文件 .pipe(minifyCSS()) // 3. 另存为压缩文件 .pipe(gulp.dest('dist/css'))&#125;)// 在命令行使用 gulp auto 启动此任务gulp.task('auto', function () &#123; // 监听文件修改，当文件被修改则执行 css 任务 gulp.watch('css/*.css', ['css'])&#125;);// 使用 gulp.task('default') 定义默认任务// 在命令行使用 gulp 启动 css 任务和 auto 任务gulp.task('default', ['css', 'auto']) 三、运行 gulp 查看效果 在命令行输入 gulp +回车 你将看到命令行出现如下提示 12345678gulp[17:01:19] Using gulpfile ~/Documents/code/gulp-book/demo/chapter3/gulpfile.js[17:01:19] Starting &apos;css&apos;...[17:01:19] Finished &apos;css&apos; after 6.21 ms[17:01:19] Starting &apos;auto&apos;...[17:01:19] Finished &apos;auto&apos; after 5.42 ms[17:01:19] Starting &apos;default&apos;...[17:01:19] Finished &apos;default&apos; after 5.71 μs gulp 会创建 dist/css 目录，并创建 a.css 文件，此文件存放压缩后的 css 代码。 ##使用 gulp 压缩图片压缩 图片文件可降低文件大小，提高图片加载速度。一、安装 gulp-imagemin 模块 提示：你需要使用命令行的 cd 切换至对应目录再进行安装操作和 gulp 启动操作。 在命令行输入 1npm install -D gulp-imagemin 安装成功后你会看到如下信息：(安装时间可能会比较长) 1234567gulp-imagemin@2.2.1 node_modules/gulp-imagemin├── object-assign@2.0.0├── pretty-bytes@1.0.3 (get-stdin@4.0.1)├── chalk@1.0.0 (escape-string-regexp@1.0.3, ansi-styles@2.0.1, supports-color@1.3.1, has-ansi@1.0.3, strip-ansi@2.0.1)├── through2-concurrent@0.3.1 (through2@0.6.3)├── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reevaluate@3.0.0, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, vinyl@0.4.6, through2@0.6.3, multipipe@0.1.2, lodash.template@3.3.2, dateformat@1.0.11)└── imagemin@3.1.0 (get-stdin@3.0.2, optional@0.1.3, vinyl@0.4.6, through2@0.6.3, stream-combiner@0.2.1, concat-stream@1.4.7, meow@2.1.0, vinyl-fs@0.3.13, imagemin-svgo@4.1.2, imagemin-optipng@4.2.0, imagemin-jpegtran@4.1.0, imagemin-pngquant@4.0.0, imagemin-gifsicle@4.1.0) 二、创建 gulpfile.js 文件编写代码 在对应目录创建 gulpfile.js 文件并写入如下内容： 12345678910111213141516171819202122232425262728// 获取 gulpvar gulp = require('gulp');// 获取 gulp-imagemin 模块var imagemin = require('gulp-imagemin')// 压缩图片任务// 在命令行输入 gulp images 启动此任务gulp.task('images', function () &#123; // 1. 找到图片 gulp.src('images/*.*') // 2. 压缩图片 .pipe(imagemin(&#123; progressive: true &#125;)) // 3. 另存图片 .pipe(gulp.dest('dist/images'))&#125;);// 在命令行使用 gulp auto 启动此任务gulp.task('auto', function () &#123; // 监听文件修改，当文件被修改则执行 images 任务 gulp.watch('images/*.*)', ['images'])&#125;);// 使用 gulp.task('default') 定义默认任务// 在命令行使用 gulp 启动 images 任务和 auto 任务gulp.task('default', ['images', 'auto']) 三、在 images/ 目录下存放图片 在 gulpfile.js 对应目录创建 images 文件夹，并在 images/ 目录下存放图片。 四、运行 gulp 查看效果 在命令行输入 gulp +回车 你将看到命令行出现如下提示 123456789gulp[18:10:42] Using gulpfile ~/Documents/code/gulp-book/demo/gulp-easy/gulpfile.js[18:10:42] Starting &apos;images&apos;...[18:10:42] Finished &apos;images&apos; after 5.72 ms[18:10:42] Starting &apos;auto&apos;...[18:10:42] Finished &apos;auto&apos; after 6.39 ms[18:10:42] Starting &apos;default&apos;...[18:10:42] Finished &apos;default&apos; after 5.91 μs[18:10:42] gulp-imagemin: Minified 3 images (saved 25.83 kB - 5.2%) ##使用 gulp 编译 LESS以及使用 gulp 编译 Sass需有在Sass官网下载最新版本Ruby然后按照说明安装sass1234567891011121314//1.删除原gem源gem sources --remove https://rubygems.org///2.添加国内淘宝源gem sources -a https://ruby.taobao.org///3.打印是否替换成功gem sources -l//4.更换成功后打印如下*** CURRENT SOURCES ***https://ruby.taobao.org///安装sassgem install -g sass Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护。 安装 1npm install -D gulp-less 基本用法12345678910111213141516171819202122232425// 获取 gulpvar gulp = require('gulp')// 获取 gulp-less 模块var less = require('gulp-less')// 编译less// 在命令行输入 gulp less 启动此任务gulp.task('less', function () &#123; // 1. 找到 less 文件 gulp.src('less/**.less') // 2. 编译为css .pipe(less()) // 3. 另存文件 .pipe(gulp.dest('dist/css'))&#125;);// 在命令行使用 gulp auto 启动此任务gulp.task('auto', function () &#123; // 监听文件修改，当文件被修改则执行 less 任务 gulp.watch('less/**.less', ['less'])&#125;)// 使用 gulp.task('default') 定义默认任务// 在命令行使用 gulp 启动 less 任务和 auto 任务gulp.task('default', ['less', 'auto']) Sass 是一种 CSS 的开发工具，提供了许多便利的写法，大大节省了开发者的时间，使得 CSS 的开发，变得简单和可维护。 安装 1npm install -D gulp-ruby-sass 基本用法12345678910111213141516171819202122232425// 获取 gulpvar gulp = require('gulp')// 获取 gulp-ruby-sass 模块var sass = require('gulp-ruby-sass')// 编译sass// 在命令行输入 gulp sass 启动此任务gulp.task('sass', function() &#123; return sass('sass/') .on('error', function (err) &#123; console.error('Error!', err.message); &#125;) .pipe(gulp.dest('dist/css'))&#125;);// 在命令行使用 gulp auto 启动此任务gulp.task('auto', function () &#123; // 监听文件修改，当文件被修改则执行 images 任务 gulp.watch('sass/**/*.scss', ['sass'])&#125;);// 使用 gulp.task('default') 定义默认任务// 在命令行使用 gulp 启动 sass 任务和 auto 任务gulp.task('default', ['sass', 'auto']) ##最终常用压缩的集合代码1234567891011121314151617181920212223242526// 引入gulp, 实际上是Gulp的一个实例对象let gulp = require(&apos;gulp&apos;);// 是一个压缩js的插件 ，返回的是一个函数let uglify = require(&apos;gulp-uglify&apos;);// 是一个压缩css的插件，返回的是一个函数let minifyCss = require(&apos;gulp-minify-css&apos;);let babel = require(&apos;gulp-babel&apos;);// 新建一个名叫script的任务gulp.task(&apos;script&apos;, () =&gt; &#123; //读取js/*.js; 通过管道让uglify()去处理所有的流，通过管道把文件写入到目标文件中 //**/表示js目录任意多层级目录下的js文件 gulp.src(&apos;js/**/*.js&apos;).pipe(babel()).pipe(uglify()).pipe(gulp.dest(&apos;dist/js&apos;));&#125;);// 新建一个名为css的任务gulp.task(&apos;css&apos;, () =&gt; &#123; // 读取css/*.css文件, 通过管道minifycss()去处理，再放入到目标文件 gulp.src(&apos;css/**/*.css&apos;).pipe(minifyCss()).pipe(gulp.dest(&apos;dist/css&apos;));&#125;)//新建一个名为auto的任务gulp.task(&apos;auto&apos;, function()&#123; // 监听js/*.js文件，如果发生变化则执行script gulp.watch(&apos;js/**/*.js&apos;, [&apos;script&apos;]); gulp.watch(&apos;css/**/*.css&apos;, [&apos;css&apos;]);&#125;);//新建一个名叫default的任务，执行这些任务之前，先执行script,css,auto任务gulp.task(&apos;default&apos;, [&apos;script&apos;, &apos;css&apos;, &apos;auto&apos;]);]]></content>
      <categories>
        <category>Learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Testing</category>
      </categories>
  </entry>
</search>
